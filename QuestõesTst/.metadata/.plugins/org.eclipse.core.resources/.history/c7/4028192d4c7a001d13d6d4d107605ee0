package bst;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.Scanner;

import bst.ContaFolha.Node;

public class PredecessorBST {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		String[] num = sc.nextLine().split(" ");
		int n = sc.nextInt();
		
		int[] num2 = new int[num.length];
		for(int i = 0; i < num.length; i++) {
			num2[i] = Integer.parseInt(num[i]);
		}
		
		predecessorBst(num2, n);

	}

	private static void predecessorBst(int[] num, int n) {
		BST array = new BST();
		
		for(int i = 0; i < num.length; i++) {
			array.add(num[i]);
		}
		
		Node nodeElement = array.search(n);
		System.out.println(Arrays.toString(array.predecessor(nodeElement)));
		
	}
	
	public static class Node {
		
		protected int value;
		protected Node left;
		protected Node right;
		protected Node parent;
		
		public Node(int value) {
			this.value = value;
		}
		
	}
	
	public static class BST {
		
		protected Node root;
		
		public boolean isEmpty() {
			return this.root == null;
		}
		
		public int[] predecessor(Node node) {
			LinkedList<Integer> out = new LinkedList<>();
			if(node != null) {
				out.add(node.value);
				
				if(node.left != null) {
					out.add(node.left.value);
					max(node.left, out);
				} else {
					Node aux = node.parent;
					out.add(aux.value);
					
					while(aux != null && aux.value > node.value) {
						aux = aux.parent;
						out.add(aux.value);
					}
					
				}
			}
			
			int[] out2 = new int[out.size()];
			for(int i = 0; i < out2.length; i++) {
				out2[i] = out.removeFirst();
			}

			return out2;
		}

		private void max(Node node, LinkedList<Integer> out) {
			if(node.right != null) {
				out.add(node.right.value);
				max(node.right, out);
			}
			
		}

		public Node search(int n) {
			Node aux = this.root;
			while(aux != null) {
				if(aux.value == n) return aux;
				if(n < aux.value) aux = aux.left;
				if(n > aux.value) aux = aux.right;
			}
			return null;
		}

		public void add(int element) {
			if(this.isEmpty()) {
				this.root = new Node(element);
			} else {
				Node aux = this.root;
				while(aux != null) {
					if(element < aux.value) {
						if(aux.left == null) {
							Node newNode = new Node(element);
							aux.left = newNode;
							newNode.parent = aux;
							return;
						}
						aux = aux.left;
					} else {
						if(aux.right == null) {
							Node newNode = new Node(element);
							aux.right = newNode;
							newNode.parent = aux;
							return;
						}
						aux = aux.right;
					}
				}
			}
			
		}
		
	}

}
